// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lightning/checkpoints/file_checkpoints.proto

package checkpoints

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type CheckpointsModel struct {
	// key is table_name
	Checkpoints map[string]*TableCheckpointModel `protobuf:"bytes,1,rep,name=checkpoints,proto3" json:"checkpoints,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *CheckpointsModel) Reset()         { *m = CheckpointsModel{} }
func (m *CheckpointsModel) String() string { return proto.CompactTextString(m) }
func (*CheckpointsModel) ProtoMessage()    {}
func (*CheckpointsModel) Descriptor() ([]byte, []int) {
	return fileDescriptor_deb32a9bf46ada61, []int{0}
}
func (m *CheckpointsModel) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CheckpointsModel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CheckpointsModel.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CheckpointsModel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckpointsModel.Merge(m, src)
}
func (m *CheckpointsModel) XXX_Size() int {
	return m.Size()
}
func (m *CheckpointsModel) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckpointsModel.DiscardUnknown(m)
}

var xxx_messageInfo_CheckpointsModel proto.InternalMessageInfo

type TableCheckpointModel struct {
	Hash      []byte                           `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	Status    uint32                           `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`
	AllocBase int64                            `protobuf:"varint,4,opt,name=alloc_base,json=allocBase,proto3" json:"alloc_base,omitempty"`
	Engines   map[int32]*EngineCheckpointModel `protobuf:"bytes,8,rep,name=engines,proto3" json:"engines,omitempty" protobuf_key:"zigzag32,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *TableCheckpointModel) Reset()         { *m = TableCheckpointModel{} }
func (m *TableCheckpointModel) String() string { return proto.CompactTextString(m) }
func (*TableCheckpointModel) ProtoMessage()    {}
func (*TableCheckpointModel) Descriptor() ([]byte, []int) {
	return fileDescriptor_deb32a9bf46ada61, []int{1}
}
func (m *TableCheckpointModel) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TableCheckpointModel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TableCheckpointModel.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TableCheckpointModel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TableCheckpointModel.Merge(m, src)
}
func (m *TableCheckpointModel) XXX_Size() int {
	return m.Size()
}
func (m *TableCheckpointModel) XXX_DiscardUnknown() {
	xxx_messageInfo_TableCheckpointModel.DiscardUnknown(m)
}

var xxx_messageInfo_TableCheckpointModel proto.InternalMessageInfo

type EngineCheckpointModel struct {
	Status uint32 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	// key is "$path:$offset"
	Chunks map[string]*ChunkCheckpointModel `protobuf:"bytes,2,rep,name=chunks,proto3" json:"chunks,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *EngineCheckpointModel) Reset()         { *m = EngineCheckpointModel{} }
func (m *EngineCheckpointModel) String() string { return proto.CompactTextString(m) }
func (*EngineCheckpointModel) ProtoMessage()    {}
func (*EngineCheckpointModel) Descriptor() ([]byte, []int) {
	return fileDescriptor_deb32a9bf46ada61, []int{2}
}
func (m *EngineCheckpointModel) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EngineCheckpointModel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EngineCheckpointModel.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EngineCheckpointModel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EngineCheckpointModel.Merge(m, src)
}
func (m *EngineCheckpointModel) XXX_Size() int {
	return m.Size()
}
func (m *EngineCheckpointModel) XXX_DiscardUnknown() {
	xxx_messageInfo_EngineCheckpointModel.DiscardUnknown(m)
}

var xxx_messageInfo_EngineCheckpointModel proto.InternalMessageInfo

type ChunkCheckpointModel struct {
	Path              string  `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Offset            int64   `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	ColumnPermutation []int32 `protobuf:"varint,12,rep,packed,name=column_permutation,json=columnPermutation,proto3" json:"column_permutation,omitempty"`
	EndOffset         int64   `protobuf:"varint,5,opt,name=end_offset,json=endOffset,proto3" json:"end_offset,omitempty"`
	Pos               int64   `protobuf:"varint,6,opt,name=pos,proto3" json:"pos,omitempty"`
	PrevRowidMax      int64   `protobuf:"varint,7,opt,name=prev_rowid_max,json=prevRowidMax,proto3" json:"prev_rowid_max,omitempty"`
	RowidMax          int64   `protobuf:"varint,8,opt,name=rowid_max,json=rowidMax,proto3" json:"rowid_max,omitempty"`
	KvcBytes          uint64  `protobuf:"varint,9,opt,name=kvc_bytes,json=kvcBytes,proto3" json:"kvc_bytes,omitempty"`
	KvcKvs            uint64  `protobuf:"varint,10,opt,name=kvc_kvs,json=kvcKvs,proto3" json:"kvc_kvs,omitempty"`
	KvcChecksum       uint64  `protobuf:"fixed64,11,opt,name=kvc_checksum,json=kvcChecksum,proto3" json:"kvc_checksum,omitempty"`
	Timestamp         int64   `protobuf:"fixed64,13,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (m *ChunkCheckpointModel) Reset()         { *m = ChunkCheckpointModel{} }
func (m *ChunkCheckpointModel) String() string { return proto.CompactTextString(m) }
func (*ChunkCheckpointModel) ProtoMessage()    {}
func (*ChunkCheckpointModel) Descriptor() ([]byte, []int) {
	return fileDescriptor_deb32a9bf46ada61, []int{3}
}
func (m *ChunkCheckpointModel) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChunkCheckpointModel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChunkCheckpointModel.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChunkCheckpointModel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChunkCheckpointModel.Merge(m, src)
}
func (m *ChunkCheckpointModel) XXX_Size() int {
	return m.Size()
}
func (m *ChunkCheckpointModel) XXX_DiscardUnknown() {
	xxx_messageInfo_ChunkCheckpointModel.DiscardUnknown(m)
}

var xxx_messageInfo_ChunkCheckpointModel proto.InternalMessageInfo

func init() {
	proto.RegisterType((*CheckpointsModel)(nil), "CheckpointsModel")
	proto.RegisterMapType((map[string]*TableCheckpointModel)(nil), "CheckpointsModel.CheckpointsEntry")
	proto.RegisterType((*TableCheckpointModel)(nil), "TableCheckpointModel")
	proto.RegisterMapType((map[int32]*EngineCheckpointModel)(nil), "TableCheckpointModel.EnginesEntry")
	proto.RegisterType((*EngineCheckpointModel)(nil), "EngineCheckpointModel")
	proto.RegisterMapType((map[string]*ChunkCheckpointModel)(nil), "EngineCheckpointModel.ChunksEntry")
	proto.RegisterType((*ChunkCheckpointModel)(nil), "ChunkCheckpointModel")
}

func init() {
	proto.RegisterFile("lightning/checkpoints/file_checkpoints.proto", fileDescriptor_deb32a9bf46ada61)
}

var fileDescriptor_deb32a9bf46ada61 = []byte{
	// 575 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x53, 0xcd, 0x6e, 0xd3, 0x4c,
	0x14, 0xcd, 0xc4, 0x6d, 0x9a, 0xdc, 0xa4, 0x9f, 0xd2, 0x51, 0xdb, 0x6f, 0x14, 0xc0, 0x32, 0x15,
	0x0b, 0x23, 0xda, 0x44, 0x2a, 0x1b, 0x54, 0xb1, 0x6a, 0xe9, 0x0a, 0x55, 0x54, 0x23, 0xd8, 0xb0,
	0xb1, 0xc6, 0xce, 0xc4, 0xb6, 0xfc, 0x33, 0x96, 0x67, 0x6c, 0xda, 0xb7, 0xe0, 0x4d, 0x78, 0x02,
	0xf6, 0x5d, 0x76, 0xc9, 0x82, 0x05, 0xb4, 0x8f, 0xc0, 0x0b, 0x20, 0x8f, 0x8d, 0xe2, 0xa0, 0xa8,
	0x62, 0x77, 0xef, 0x39, 0xe7, 0x9e, 0x99, 0xa3, 0xab, 0x0b, 0x87, 0x71, 0xe8, 0x07, 0x2a, 0x0d,
	0x53, 0x7f, 0xe6, 0x05, 0xdc, 0x8b, 0x32, 0x11, 0xa6, 0x4a, 0xce, 0x16, 0x61, 0xcc, 0x9d, 0x16,
	0x30, 0xcd, 0x72, 0xa1, 0xc4, 0xe4, 0xc8, 0x0f, 0x55, 0x50, 0xb8, 0x53, 0x4f, 0x24, 0x33, 0x5f,
	0xf8, 0x62, 0xa6, 0x61, 0xb7, 0x58, 0xe8, 0x4e, 0x37, 0xba, 0xaa, 0xe5, 0x07, 0x5f, 0x10, 0x8c,
	0xcf, 0x96, 0x26, 0x17, 0x62, 0xce, 0x63, 0xfc, 0x06, 0x86, 0x2d, 0x63, 0x82, 0x2c, 0xc3, 0x1e,
	0x1e, 0x1f, 0x4c, 0xff, 0xd6, 0xb5, 0x81, 0xf3, 0x54, 0xe5, 0xd7, 0xb4, 0x3d, 0x36, 0xf9, 0xb0,
	0xe2, 0xac, 0x05, 0x78, 0x0c, 0x46, 0xc4, 0xaf, 0x09, 0xb2, 0x90, 0x3d, 0xa0, 0x55, 0x89, 0x5f,
	0xc0, 0x66, 0xc9, 0xe2, 0x82, 0x93, 0xae, 0x85, 0xec, 0xe1, 0xf1, 0xde, 0xf4, 0x3d, 0x73, 0x63,
	0xbe, 0x1c, 0xd4, 0x2f, 0xd1, 0x5a, 0x73, 0xd2, 0x7d, 0x85, 0x0e, 0x7e, 0x21, 0xd8, 0x5d, 0xa7,
	0xc1, 0x18, 0x36, 0x02, 0x26, 0x03, 0x6d, 0x3e, 0xa2, 0xba, 0xc6, 0xfb, 0xd0, 0x93, 0x8a, 0xa9,
	0x42, 0x12, 0xc3, 0x42, 0xf6, 0x36, 0x6d, 0x3a, 0xfc, 0x04, 0x80, 0xc5, 0xb1, 0xf0, 0x1c, 0x97,
	0x49, 0x4e, 0x36, 0x2c, 0x64, 0x1b, 0x74, 0xa0, 0x91, 0x53, 0x26, 0x39, 0x7e, 0x0d, 0x5b, 0x3c,
	0xf5, 0xc3, 0x94, 0x4b, 0xd2, 0x6f, 0xc2, 0xaf, 0x7b, 0x72, 0x7a, 0x5e, 0x8b, 0xea, 0xf0, 0x7f,
	0x46, 0x26, 0x14, 0x46, 0x6d, 0xa2, 0x1d, 0x7a, 0xa7, 0x0e, 0x7d, 0xb8, 0x1a, 0x7a, 0xbf, 0x31,
	0x7a, 0x20, 0xf5, 0x57, 0x04, 0x7b, 0x6b, 0x45, 0xad, 0x88, 0x68, 0x25, 0xe2, 0x09, 0xf4, 0xbc,
	0xa0, 0x48, 0x23, 0x49, 0xba, 0x4d, 0x84, 0xb5, 0xf3, 0xd3, 0x33, 0x2d, 0xaa, 0x23, 0x34, 0x13,
	0x93, 0x4b, 0x18, 0xb6, 0xe0, 0x7f, 0xd9, 0x9a, 0x96, 0x3f, 0xf0, 0xff, 0xef, 0x5d, 0xd8, 0x5d,
	0xa7, 0xa9, 0xb6, 0x96, 0x31, 0x15, 0x34, 0xe6, 0xba, 0xae, 0x22, 0x89, 0xc5, 0x42, 0x72, 0xa5,
	0xed, 0x0d, 0xda, 0x74, 0xf8, 0x08, 0xb0, 0x27, 0xe2, 0x22, 0x49, 0x9d, 0x8c, 0xe7, 0x49, 0xa1,
	0x98, 0x0a, 0x45, 0x4a, 0x46, 0x96, 0x61, 0x6f, 0xd2, 0x9d, 0x9a, 0xb9, 0x5c, 0x12, 0xd5, 0x92,
	0x79, 0x3a, 0x77, 0x1a, 0xab, 0xcd, 0x7a, 0xc9, 0x3c, 0x9d, 0xbf, 0xab, 0xdd, 0xc6, 0x60, 0x64,
	0x42, 0x92, 0x9e, 0xc6, 0xab, 0x12, 0x3f, 0x83, 0xff, 0xb2, 0x9c, 0x97, 0x4e, 0x2e, 0x3e, 0x85,
	0x73, 0x27, 0x61, 0x57, 0x64, 0x4b, 0x93, 0xa3, 0x0a, 0xa5, 0x15, 0x78, 0xc1, 0xae, 0xf0, 0x23,
	0x18, 0x2c, 0x05, 0x7d, 0x2d, 0xe8, 0xe7, 0x2d, 0x32, 0x2a, 0x3d, 0xc7, 0xbd, 0x56, 0x5c, 0x92,
	0x81, 0x85, 0xec, 0x0d, 0xda, 0x8f, 0x4a, 0xef, 0xb4, 0xea, 0xf1, 0xff, 0xb0, 0x55, 0x91, 0x51,
	0x29, 0x09, 0x68, 0xaa, 0x17, 0x95, 0xde, 0xdb, 0x52, 0xe2, 0xa7, 0x30, 0xaa, 0x08, 0x7d, 0x3d,
	0xb2, 0x48, 0xc8, 0xd0, 0x42, 0x76, 0x8f, 0x0e, 0xa3, 0xd2, 0x3b, 0x6b, 0x20, 0xfc, 0x18, 0x06,
	0x2a, 0x4c, 0xb8, 0x54, 0x2c, 0xc9, 0xc8, 0xb6, 0x85, 0xec, 0x31, 0x5d, 0x02, 0xa7, 0xcf, 0x6f,
	0x7e, 0x9a, 0x9d, 0x9b, 0x3b, 0x13, 0xdd, 0xde, 0x99, 0xe8, 0xc7, 0x9d, 0x89, 0x3e, 0xdf, 0x9b,
	0x9d, 0xdb, 0x7b, 0xb3, 0xf3, 0xed, 0xde, 0xec, 0x7c, 0x6c, 0x9f, 0xa5, 0xdb, 0xd3, 0x87, 0xff,
	0xf2, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0x1e, 0x3f, 0x8e, 0x94, 0x57, 0x04, 0x00, 0x00,
}

func (m *CheckpointsModel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckpointsModel) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CheckpointsModel) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Checkpoints) > 0 {
		for k := range m.Checkpoints {
			v := m.Checkpoints[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintFileCheckpoints(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintFileCheckpoints(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintFileCheckpoints(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *TableCheckpointModel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TableCheckpointModel) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TableCheckpointModel) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Engines) > 0 {
		for k := range m.Engines {
			v := m.Engines[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintFileCheckpoints(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintFileCheckpoints(dAtA, i, uint64((uint32(k)<<1)^uint32((k>>31))))
			i--
			dAtA[i] = 0x8
			i = encodeVarintFileCheckpoints(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x42
		}
	}
	if m.AllocBase != 0 {
		i = encodeVarintFileCheckpoints(dAtA, i, uint64(m.AllocBase))
		i--
		dAtA[i] = 0x20
	}
	if m.Status != 0 {
		i = encodeVarintFileCheckpoints(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintFileCheckpoints(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EngineCheckpointModel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EngineCheckpointModel) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EngineCheckpointModel) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Chunks) > 0 {
		for k := range m.Chunks {
			v := m.Chunks[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintFileCheckpoints(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintFileCheckpoints(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintFileCheckpoints(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Status != 0 {
		i = encodeVarintFileCheckpoints(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ChunkCheckpointModel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChunkCheckpointModel) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChunkCheckpointModel) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Timestamp != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.Timestamp))
		i--
		dAtA[i] = 0x69
	}
	if len(m.ColumnPermutation) > 0 {
		dAtA5 := make([]byte, len(m.ColumnPermutation)*10)
		var j4 int
		for _, num1 := range m.ColumnPermutation {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA5[j4] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j4++
			}
			dAtA5[j4] = uint8(num)
			j4++
		}
		i -= j4
		copy(dAtA[i:], dAtA5[:j4])
		i = encodeVarintFileCheckpoints(dAtA, i, uint64(j4))
		i--
		dAtA[i] = 0x62
	}
	if m.KvcChecksum != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.KvcChecksum))
		i--
		dAtA[i] = 0x59
	}
	if m.KvcKvs != 0 {
		i = encodeVarintFileCheckpoints(dAtA, i, uint64(m.KvcKvs))
		i--
		dAtA[i] = 0x50
	}
	if m.KvcBytes != 0 {
		i = encodeVarintFileCheckpoints(dAtA, i, uint64(m.KvcBytes))
		i--
		dAtA[i] = 0x48
	}
	if m.RowidMax != 0 {
		i = encodeVarintFileCheckpoints(dAtA, i, uint64(m.RowidMax))
		i--
		dAtA[i] = 0x40
	}
	if m.PrevRowidMax != 0 {
		i = encodeVarintFileCheckpoints(dAtA, i, uint64(m.PrevRowidMax))
		i--
		dAtA[i] = 0x38
	}
	if m.Pos != 0 {
		i = encodeVarintFileCheckpoints(dAtA, i, uint64(m.Pos))
		i--
		dAtA[i] = 0x30
	}
	if m.EndOffset != 0 {
		i = encodeVarintFileCheckpoints(dAtA, i, uint64(m.EndOffset))
		i--
		dAtA[i] = 0x28
	}
	if m.Offset != 0 {
		i = encodeVarintFileCheckpoints(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Path) > 0 {
		i -= len(m.Path)
		copy(dAtA[i:], m.Path)
		i = encodeVarintFileCheckpoints(dAtA, i, uint64(len(m.Path)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintFileCheckpoints(dAtA []byte, offset int, v uint64) int {
	offset -= sovFileCheckpoints(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CheckpointsModel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Checkpoints) > 0 {
		for k, v := range m.Checkpoints {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovFileCheckpoints(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovFileCheckpoints(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovFileCheckpoints(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *TableCheckpointModel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovFileCheckpoints(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovFileCheckpoints(uint64(m.Status))
	}
	if m.AllocBase != 0 {
		n += 1 + sovFileCheckpoints(uint64(m.AllocBase))
	}
	if len(m.Engines) > 0 {
		for k, v := range m.Engines {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovFileCheckpoints(uint64(l))
			}
			mapEntrySize := 1 + sozFileCheckpoints(uint64(k)) + l
			n += mapEntrySize + 1 + sovFileCheckpoints(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *EngineCheckpointModel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovFileCheckpoints(uint64(m.Status))
	}
	if len(m.Chunks) > 0 {
		for k, v := range m.Chunks {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovFileCheckpoints(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovFileCheckpoints(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovFileCheckpoints(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *ChunkCheckpointModel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovFileCheckpoints(uint64(l))
	}
	if m.Offset != 0 {
		n += 1 + sovFileCheckpoints(uint64(m.Offset))
	}
	if m.EndOffset != 0 {
		n += 1 + sovFileCheckpoints(uint64(m.EndOffset))
	}
	if m.Pos != 0 {
		n += 1 + sovFileCheckpoints(uint64(m.Pos))
	}
	if m.PrevRowidMax != 0 {
		n += 1 + sovFileCheckpoints(uint64(m.PrevRowidMax))
	}
	if m.RowidMax != 0 {
		n += 1 + sovFileCheckpoints(uint64(m.RowidMax))
	}
	if m.KvcBytes != 0 {
		n += 1 + sovFileCheckpoints(uint64(m.KvcBytes))
	}
	if m.KvcKvs != 0 {
		n += 1 + sovFileCheckpoints(uint64(m.KvcKvs))
	}
	if m.KvcChecksum != 0 {
		n += 9
	}
	if len(m.ColumnPermutation) > 0 {
		l = 0
		for _, e := range m.ColumnPermutation {
			l += sovFileCheckpoints(uint64(e))
		}
		n += 1 + sovFileCheckpoints(uint64(l)) + l
	}
	if m.Timestamp != 0 {
		n += 9
	}
	return n
}

func sovFileCheckpoints(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozFileCheckpoints(x uint64) (n int) {
	return sovFileCheckpoints(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CheckpointsModel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFileCheckpoints
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckpointsModel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckpointsModel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Checkpoints", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFileCheckpoints
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFileCheckpoints
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFileCheckpoints
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Checkpoints == nil {
				m.Checkpoints = make(map[string]*TableCheckpointModel)
			}
			var mapkey string
			var mapvalue *TableCheckpointModel
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFileCheckpoints
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFileCheckpoints
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthFileCheckpoints
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthFileCheckpoints
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFileCheckpoints
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthFileCheckpoints
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthFileCheckpoints
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &TableCheckpointModel{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipFileCheckpoints(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthFileCheckpoints
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Checkpoints[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFileCheckpoints(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFileCheckpoints
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFileCheckpoints
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TableCheckpointModel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFileCheckpoints
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TableCheckpointModel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TableCheckpointModel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFileCheckpoints
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFileCheckpoints
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthFileCheckpoints
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = append(m.Hash[:0], dAtA[iNdEx:postIndex]...)
			if m.Hash == nil {
				m.Hash = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFileCheckpoints
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllocBase", wireType)
			}
			m.AllocBase = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFileCheckpoints
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AllocBase |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Engines", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFileCheckpoints
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFileCheckpoints
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFileCheckpoints
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Engines == nil {
				m.Engines = make(map[int32]*EngineCheckpointModel)
			}
			var mapkey int32
			var mapvalue *EngineCheckpointModel
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFileCheckpoints
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var mapkeytemp int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFileCheckpoints
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkeytemp |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					mapkeytemp = int32((uint32(mapkeytemp) >> 1) ^ uint32(((mapkeytemp&1)<<31)>>31))
					mapkey = int32(mapkeytemp)
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFileCheckpoints
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthFileCheckpoints
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthFileCheckpoints
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &EngineCheckpointModel{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipFileCheckpoints(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthFileCheckpoints
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Engines[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFileCheckpoints(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFileCheckpoints
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFileCheckpoints
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EngineCheckpointModel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFileCheckpoints
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EngineCheckpointModel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EngineCheckpointModel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFileCheckpoints
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chunks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFileCheckpoints
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFileCheckpoints
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFileCheckpoints
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Chunks == nil {
				m.Chunks = make(map[string]*ChunkCheckpointModel)
			}
			var mapkey string
			var mapvalue *ChunkCheckpointModel
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFileCheckpoints
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFileCheckpoints
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthFileCheckpoints
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthFileCheckpoints
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFileCheckpoints
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthFileCheckpoints
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthFileCheckpoints
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &ChunkCheckpointModel{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipFileCheckpoints(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthFileCheckpoints
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Chunks[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFileCheckpoints(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFileCheckpoints
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFileCheckpoints
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChunkCheckpointModel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFileCheckpoints
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChunkCheckpointModel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChunkCheckpointModel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFileCheckpoints
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFileCheckpoints
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFileCheckpoints
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFileCheckpoints
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndOffset", wireType)
			}
			m.EndOffset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFileCheckpoints
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndOffset |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pos", wireType)
			}
			m.Pos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFileCheckpoints
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pos |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrevRowidMax", wireType)
			}
			m.PrevRowidMax = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFileCheckpoints
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PrevRowidMax |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RowidMax", wireType)
			}
			m.RowidMax = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFileCheckpoints
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RowidMax |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KvcBytes", wireType)
			}
			m.KvcBytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFileCheckpoints
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KvcBytes |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KvcKvs", wireType)
			}
			m.KvcKvs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFileCheckpoints
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KvcKvs |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field KvcChecksum", wireType)
			}
			m.KvcChecksum = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.KvcChecksum = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 12:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFileCheckpoints
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ColumnPermutation = append(m.ColumnPermutation, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFileCheckpoints
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthFileCheckpoints
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthFileCheckpoints
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.ColumnPermutation) == 0 {
					m.ColumnPermutation = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFileCheckpoints
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ColumnPermutation = append(m.ColumnPermutation, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ColumnPermutation", wireType)
			}
		case 13:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.Timestamp = int64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		default:
			iNdEx = preIndex
			skippy, err := skipFileCheckpoints(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFileCheckpoints
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFileCheckpoints
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFileCheckpoints(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFileCheckpoints
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFileCheckpoints
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFileCheckpoints
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthFileCheckpoints
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupFileCheckpoints
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthFileCheckpoints
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthFileCheckpoints        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFileCheckpoints          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupFileCheckpoints = fmt.Errorf("proto: unexpected end of group")
)
