// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lightning/restore/file_checkpoints.proto

package restore

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type CheckpointsModel struct {
	// key is table_name
	Checkpoints map[string]*TableCheckpointModel `protobuf:"bytes,1,rep,name=checkpoints,proto3" json:"checkpoints,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *CheckpointsModel) Reset()         { *m = CheckpointsModel{} }
func (m *CheckpointsModel) String() string { return proto.CompactTextString(m) }
func (*CheckpointsModel) ProtoMessage()    {}
func (*CheckpointsModel) Descriptor() ([]byte, []int) {
	return fileDescriptor_c47ec4f2f281cd62, []int{0}
}
func (m *CheckpointsModel) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CheckpointsModel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CheckpointsModel.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CheckpointsModel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckpointsModel.Merge(m, src)
}
func (m *CheckpointsModel) XXX_Size() int {
	return m.Size()
}
func (m *CheckpointsModel) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckpointsModel.DiscardUnknown(m)
}

var xxx_messageInfo_CheckpointsModel proto.InternalMessageInfo

type TableCheckpointModel struct {
	Hash                []byte                           `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	Status              uint32                           `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`
	AllocBase           int64                            `protobuf:"varint,4,opt,name=alloc_base,json=allocBase,proto3" json:"alloc_base,omitempty"`
	Engines             map[int32]*EngineCheckpointModel `protobuf:"bytes,8,rep,name=engines,proto3" json:"engines,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	IndexEngineStatuses []uint32                         `protobuf:"varint,7,rep,packed,name=index_engine_statuses,json=indexEngineStatuses,proto3" json:"index_engine_statuses,omitempty"`
}

func (m *TableCheckpointModel) Reset()         { *m = TableCheckpointModel{} }
func (m *TableCheckpointModel) String() string { return proto.CompactTextString(m) }
func (*TableCheckpointModel) ProtoMessage()    {}
func (*TableCheckpointModel) Descriptor() ([]byte, []int) {
	return fileDescriptor_c47ec4f2f281cd62, []int{1}
}
func (m *TableCheckpointModel) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TableCheckpointModel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TableCheckpointModel.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TableCheckpointModel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TableCheckpointModel.Merge(m, src)
}
func (m *TableCheckpointModel) XXX_Size() int {
	return m.Size()
}
func (m *TableCheckpointModel) XXX_DiscardUnknown() {
	xxx_messageInfo_TableCheckpointModel.DiscardUnknown(m)
}

var xxx_messageInfo_TableCheckpointModel proto.InternalMessageInfo

type EngineCheckpointModel struct {
	Status uint32 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	// key is "$path:$offset"
	Chunks   map[string]*ChunkCheckpointModel `protobuf:"bytes,2,rep,name=chunks,proto3" json:"chunks,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	EngineId int32                            `protobuf:"varint,3,opt,name=engine_id,json=engineId,proto3" json:"engine_id,omitempty"`
}

func (m *EngineCheckpointModel) Reset()         { *m = EngineCheckpointModel{} }
func (m *EngineCheckpointModel) String() string { return proto.CompactTextString(m) }
func (*EngineCheckpointModel) ProtoMessage()    {}
func (*EngineCheckpointModel) Descriptor() ([]byte, []int) {
	return fileDescriptor_c47ec4f2f281cd62, []int{2}
}
func (m *EngineCheckpointModel) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EngineCheckpointModel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EngineCheckpointModel.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EngineCheckpointModel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EngineCheckpointModel.Merge(m, src)
}
func (m *EngineCheckpointModel) XXX_Size() int {
	return m.Size()
}
func (m *EngineCheckpointModel) XXX_DiscardUnknown() {
	xxx_messageInfo_EngineCheckpointModel.DiscardUnknown(m)
}

var xxx_messageInfo_EngineCheckpointModel proto.InternalMessageInfo

type ChunkCheckpointModel struct {
	Path               string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Offset             int64  `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Columns            []byte `protobuf:"bytes,3,opt,name=columns,proto3" json:"columns,omitempty"`
	ShouldIncludeRowId bool   `protobuf:"varint,4,opt,name=should_include_row_id,json=shouldIncludeRowId,proto3" json:"should_include_row_id,omitempty"`
	EndOffset          int64  `protobuf:"varint,5,opt,name=end_offset,json=endOffset,proto3" json:"end_offset,omitempty"`
	Pos                int64  `protobuf:"varint,6,opt,name=pos,proto3" json:"pos,omitempty"`
	PrevRowidMax       int64  `protobuf:"varint,7,opt,name=prev_rowid_max,json=prevRowidMax,proto3" json:"prev_rowid_max,omitempty"`
	RowidMax           int64  `protobuf:"varint,8,opt,name=rowid_max,json=rowidMax,proto3" json:"rowid_max,omitempty"`
	KvcBytes           uint64 `protobuf:"varint,9,opt,name=kvc_bytes,json=kvcBytes,proto3" json:"kvc_bytes,omitempty"`
	KvcKvs             uint64 `protobuf:"varint,10,opt,name=kvc_kvs,json=kvcKvs,proto3" json:"kvc_kvs,omitempty"`
	KvcChecksum        uint64 `protobuf:"fixed64,11,opt,name=kvc_checksum,json=kvcChecksum,proto3" json:"kvc_checksum,omitempty"`
}

func (m *ChunkCheckpointModel) Reset()         { *m = ChunkCheckpointModel{} }
func (m *ChunkCheckpointModel) String() string { return proto.CompactTextString(m) }
func (*ChunkCheckpointModel) ProtoMessage()    {}
func (*ChunkCheckpointModel) Descriptor() ([]byte, []int) {
	return fileDescriptor_c47ec4f2f281cd62, []int{3}
}
func (m *ChunkCheckpointModel) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChunkCheckpointModel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChunkCheckpointModel.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChunkCheckpointModel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChunkCheckpointModel.Merge(m, src)
}
func (m *ChunkCheckpointModel) XXX_Size() int {
	return m.Size()
}
func (m *ChunkCheckpointModel) XXX_DiscardUnknown() {
	xxx_messageInfo_ChunkCheckpointModel.DiscardUnknown(m)
}

var xxx_messageInfo_ChunkCheckpointModel proto.InternalMessageInfo

func init() {
	proto.RegisterType((*CheckpointsModel)(nil), "CheckpointsModel")
	proto.RegisterMapType((map[string]*TableCheckpointModel)(nil), "CheckpointsModel.CheckpointsEntry")
	proto.RegisterType((*TableCheckpointModel)(nil), "TableCheckpointModel")
	proto.RegisterMapType((map[int32]*EngineCheckpointModel)(nil), "TableCheckpointModel.EnginesEntry")
	proto.RegisterType((*EngineCheckpointModel)(nil), "EngineCheckpointModel")
	proto.RegisterMapType((map[string]*ChunkCheckpointModel)(nil), "EngineCheckpointModel.ChunksEntry")
	proto.RegisterType((*ChunkCheckpointModel)(nil), "ChunkCheckpointModel")
}

func init() {
	proto.RegisterFile("lightning/restore/file_checkpoints.proto", fileDescriptor_c47ec4f2f281cd62)
}

var fileDescriptor_c47ec4f2f281cd62 = []byte{
	// 617 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x54, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0xcd, 0xc6, 0xcd, 0xd7, 0x24, 0x45, 0xd5, 0xd2, 0x94, 0x55, 0x10, 0x96, 0xa9, 0x40, 0xb2,
	0x04, 0x24, 0xa2, 0x5c, 0x50, 0xc5, 0xa9, 0xa5, 0x87, 0x0a, 0x55, 0xa0, 0x05, 0x2e, 0x5c, 0x2c,
	0xc7, 0xde, 0xc4, 0x96, 0x1d, 0x6f, 0xe4, 0xb5, 0xdd, 0xf6, 0x5f, 0xf0, 0x2f, 0x38, 0xf2, 0x37,
	0x7a, 0xec, 0x11, 0x21, 0x0e, 0xd0, 0xfe, 0x11, 0xb4, 0x1f, 0x55, 0x1d, 0x14, 0x55, 0xdc, 0x76,
	0xde, 0x7b, 0x33, 0xa3, 0xf7, 0x34, 0x36, 0xb8, 0x69, 0x3c, 0x8f, 0x8a, 0x2c, 0xce, 0xe6, 0x93,
	0x9c, 0x89, 0x82, 0xe7, 0x6c, 0x32, 0x8b, 0x53, 0xe6, 0x05, 0x11, 0x0b, 0x92, 0x25, 0x8f, 0xb3,
	0x42, 0x8c, 0x97, 0x39, 0x2f, 0xf8, 0xe8, 0xc5, 0x3c, 0x2e, 0xa2, 0x72, 0x3a, 0x0e, 0xf8, 0x62,
	0x32, 0xe7, 0x73, 0x3e, 0x51, 0xf0, 0xb4, 0x9c, 0xa9, 0x4a, 0x15, 0xea, 0xa5, 0xe5, 0xbb, 0xdf,
	0x11, 0x6c, 0x1d, 0xde, 0x0e, 0x39, 0xe1, 0x21, 0x4b, 0xf1, 0x5b, 0xe8, 0xd7, 0x06, 0x13, 0xe4,
	0x58, 0x6e, 0x7f, 0x6f, 0x77, 0xfc, 0xaf, 0xae, 0x0e, 0x1c, 0x65, 0x45, 0x7e, 0x4e, 0xeb, 0x6d,
	0xa3, 0xcf, 0x2b, 0x93, 0x95, 0x00, 0x6f, 0x81, 0x95, 0xb0, 0x73, 0x82, 0x1c, 0xe4, 0xf6, 0xa8,
	0x7c, 0xe2, 0x67, 0xd0, 0xaa, 0xfc, 0xb4, 0x64, 0xa4, 0xe9, 0x20, 0xb7, 0xbf, 0x37, 0x1c, 0x7f,
	0xf2, 0xa7, 0x29, 0xbb, 0x6d, 0x54, 0x9b, 0xa8, 0xd6, 0xec, 0x37, 0x5f, 0xa3, 0xdd, 0x6f, 0x4d,
	0xd8, 0x5e, 0xa7, 0xc1, 0x18, 0x36, 0x22, 0x5f, 0x44, 0x6a, 0xf8, 0x80, 0xaa, 0x37, 0xde, 0x81,
	0xb6, 0x28, 0xfc, 0xa2, 0x14, 0xc4, 0x72, 0x90, 0xbb, 0x49, 0x4d, 0x85, 0x1f, 0x01, 0xf8, 0x69,
	0xca, 0x03, 0x6f, 0xea, 0x0b, 0x46, 0x36, 0x1c, 0xe4, 0x5a, 0xb4, 0xa7, 0x90, 0x03, 0x5f, 0x30,
	0xfc, 0x06, 0x3a, 0x2c, 0x9b, 0xc7, 0x19, 0x13, 0xa4, 0x6b, 0xcc, 0xaf, 0x5b, 0x39, 0x3e, 0xd2,
	0x22, 0x6d, 0xfe, 0xa6, 0x05, 0xef, 0xc1, 0x30, 0xce, 0x42, 0x76, 0xe6, 0x69, 0xc0, 0xd3, 0x3b,
	0x99, 0x20, 0x1d, 0xc7, 0x72, 0x37, 0xe9, 0x7d, 0x45, 0xea, 0xd6, 0x8f, 0x86, 0x1a, 0x51, 0x18,
	0xd4, 0x87, 0xd5, 0x83, 0x6a, 0xe9, 0xa0, 0x9e, 0xaf, 0x06, 0xb5, 0x63, 0x96, 0xdf, 0x91, 0xd4,
	0x4f, 0x04, 0xc3, 0xb5, 0xa2, 0x5a, 0x2c, 0x68, 0x25, 0x96, 0x7d, 0x68, 0x07, 0x51, 0x99, 0x25,
	0x82, 0x34, 0x8d, 0xed, 0xb5, 0xfd, 0xe3, 0x43, 0x25, 0xd2, 0xb6, 0x4d, 0x07, 0x7e, 0x08, 0x3d,
	0xe3, 0x37, 0x0e, 0x55, 0xda, 0x2d, 0xda, 0xd5, 0xc0, 0x71, 0x38, 0xfa, 0x00, 0xfd, 0x5a, 0xcf,
	0xff, 0x9c, 0x81, 0x92, 0xdf, 0x61, 0xee, 0x57, 0x13, 0xb6, 0xd7, 0x69, 0xe4, 0x19, 0x2c, 0xfd,
	0x22, 0x32, 0xc3, 0xd5, 0x5b, 0xfa, 0xe5, 0xb3, 0x99, 0x60, 0x85, 0x1a, 0x6f, 0x51, 0x53, 0x61,
	0x02, 0x9d, 0x80, 0xa7, 0xe5, 0x22, 0xd3, 0xf7, 0x31, 0xa0, 0x37, 0x25, 0x7e, 0x09, 0x43, 0x11,
	0xf1, 0x32, 0x0d, 0xbd, 0x38, 0x0b, 0xd2, 0x32, 0x64, 0x5e, 0xce, 0x4f, 0xa5, 0x33, 0x79, 0x2b,
	0x5d, 0x8a, 0x35, 0x79, 0xac, 0x39, 0xca, 0x4f, 0x8f, 0x43, 0x79, 0x53, 0x2c, 0x0b, 0x3d, 0xb3,
	0xa8, 0xa5, 0x6f, 0x8a, 0x65, 0xe1, 0x7b, 0xbd, 0x6b, 0x0b, 0xac, 0x25, 0x17, 0xa4, 0xad, 0x70,
	0xf9, 0xc4, 0x4f, 0xe0, 0xde, 0x32, 0x67, 0x95, 0x9c, 0x1c, 0x87, 0xde, 0xc2, 0x3f, 0x23, 0x1d,
	0x45, 0x0e, 0x24, 0x4a, 0x25, 0x78, 0xe2, 0x9f, 0xc9, 0x5c, 0x6f, 0x05, 0x5d, 0x25, 0xe8, 0xe6,
	0x35, 0x32, 0xa9, 0x02, 0x6f, 0x7a, 0x5e, 0x30, 0x41, 0x7a, 0x0e, 0x72, 0x37, 0x68, 0x37, 0xa9,
	0x82, 0x03, 0x59, 0xe3, 0x07, 0xd0, 0x91, 0x64, 0x52, 0x09, 0x02, 0x8a, 0x6a, 0x27, 0x55, 0xf0,
	0xae, 0x12, 0xf8, 0x31, 0x0c, 0x24, 0xa1, 0x3e, 0x56, 0x51, 0x2e, 0x48, 0xdf, 0x41, 0x6e, 0x9b,
	0xf6, 0x93, 0x2a, 0x38, 0x34, 0xd0, 0xc1, 0xd3, 0x8b, 0x3f, 0x76, 0xe3, 0xe2, 0xca, 0x46, 0x97,
	0x57, 0x36, 0xfa, 0x7d, 0x65, 0xa3, 0xaf, 0xd7, 0x76, 0xe3, 0xf2, 0xda, 0x6e, 0xfc, 0xb8, 0xb6,
	0x1b, 0x5f, 0x3a, 0xe6, 0x27, 0x34, 0x6d, 0xab, 0xbf, 0xc8, 0xab, 0xbf, 0x01, 0x00, 0x00, 0xff,
	0xff, 0x6e, 0x1a, 0x8d, 0x1b, 0xa0, 0x04, 0x00, 0x00,
}

func (m *CheckpointsModel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckpointsModel) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Checkpoints) > 0 {
		for k, _ := range m.Checkpoints {
			dAtA[i] = 0xa
			i++
			v := m.Checkpoints[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovFileCheckpoints(uint64(msgSize))
			}
			mapSize := 1 + len(k) + sovFileCheckpoints(uint64(len(k))) + msgSize
			i = encodeVarintFileCheckpoints(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintFileCheckpoints(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintFileCheckpoints(dAtA, i, uint64(v.Size()))
				n1, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n1
			}
		}
	}
	return i, nil
}

func (m *TableCheckpointModel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TableCheckpointModel) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Hash) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintFileCheckpoints(dAtA, i, uint64(len(m.Hash)))
		i += copy(dAtA[i:], m.Hash)
	}
	if m.Status != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintFileCheckpoints(dAtA, i, uint64(m.Status))
	}
	if m.AllocBase != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintFileCheckpoints(dAtA, i, uint64(m.AllocBase))
	}
	if len(m.IndexEngineStatuses) > 0 {
		dAtA3 := make([]byte, len(m.IndexEngineStatuses)*10)
		var j2 int
		for _, num := range m.IndexEngineStatuses {
			for num >= 1<<7 {
				dAtA3[j2] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j2++
			}
			dAtA3[j2] = uint8(num)
			j2++
		}
		dAtA[i] = 0x3a
		i++
		i = encodeVarintFileCheckpoints(dAtA, i, uint64(j2))
		i += copy(dAtA[i:], dAtA3[:j2])
	}
	if len(m.Engines) > 0 {
		for k, _ := range m.Engines {
			dAtA[i] = 0x42
			i++
			v := m.Engines[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovFileCheckpoints(uint64(msgSize))
			}
			mapSize := 1 + sovFileCheckpoints(uint64(k)) + msgSize
			i = encodeVarintFileCheckpoints(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintFileCheckpoints(dAtA, i, uint64(k))
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintFileCheckpoints(dAtA, i, uint64(v.Size()))
				n4, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n4
			}
		}
	}
	return i, nil
}

func (m *EngineCheckpointModel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EngineCheckpointModel) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFileCheckpoints(dAtA, i, uint64(m.Status))
	}
	if len(m.Chunks) > 0 {
		for k, _ := range m.Chunks {
			dAtA[i] = 0x12
			i++
			v := m.Chunks[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovFileCheckpoints(uint64(msgSize))
			}
			mapSize := 1 + len(k) + sovFileCheckpoints(uint64(len(k))) + msgSize
			i = encodeVarintFileCheckpoints(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintFileCheckpoints(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintFileCheckpoints(dAtA, i, uint64(v.Size()))
				n5, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n5
			}
		}
	}
	if m.EngineId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintFileCheckpoints(dAtA, i, uint64(m.EngineId))
	}
	return i, nil
}

func (m *ChunkCheckpointModel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChunkCheckpointModel) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Path) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintFileCheckpoints(dAtA, i, uint64(len(m.Path)))
		i += copy(dAtA[i:], m.Path)
	}
	if m.Offset != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintFileCheckpoints(dAtA, i, uint64(m.Offset))
	}
	if len(m.Columns) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintFileCheckpoints(dAtA, i, uint64(len(m.Columns)))
		i += copy(dAtA[i:], m.Columns)
	}
	if m.ShouldIncludeRowId {
		dAtA[i] = 0x20
		i++
		if m.ShouldIncludeRowId {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.EndOffset != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintFileCheckpoints(dAtA, i, uint64(m.EndOffset))
	}
	if m.Pos != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintFileCheckpoints(dAtA, i, uint64(m.Pos))
	}
	if m.PrevRowidMax != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintFileCheckpoints(dAtA, i, uint64(m.PrevRowidMax))
	}
	if m.RowidMax != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintFileCheckpoints(dAtA, i, uint64(m.RowidMax))
	}
	if m.KvcBytes != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintFileCheckpoints(dAtA, i, uint64(m.KvcBytes))
	}
	if m.KvcKvs != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintFileCheckpoints(dAtA, i, uint64(m.KvcKvs))
	}
	if m.KvcChecksum != 0 {
		dAtA[i] = 0x59
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.KvcChecksum))
		i += 8
	}
	return i, nil
}

func encodeVarintFileCheckpoints(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *CheckpointsModel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Checkpoints) > 0 {
		for k, v := range m.Checkpoints {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovFileCheckpoints(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovFileCheckpoints(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovFileCheckpoints(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *TableCheckpointModel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovFileCheckpoints(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovFileCheckpoints(uint64(m.Status))
	}
	if m.AllocBase != 0 {
		n += 1 + sovFileCheckpoints(uint64(m.AllocBase))
	}
	if len(m.IndexEngineStatuses) > 0 {
		l = 0
		for _, e := range m.IndexEngineStatuses {
			l += sovFileCheckpoints(uint64(e))
		}
		n += 1 + sovFileCheckpoints(uint64(l)) + l
	}
	if len(m.Engines) > 0 {
		for k, v := range m.Engines {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovFileCheckpoints(uint64(l))
			}
			mapEntrySize := 1 + sovFileCheckpoints(uint64(k)) + l
			n += mapEntrySize + 1 + sovFileCheckpoints(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *EngineCheckpointModel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovFileCheckpoints(uint64(m.Status))
	}
	if len(m.Chunks) > 0 {
		for k, v := range m.Chunks {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovFileCheckpoints(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovFileCheckpoints(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovFileCheckpoints(uint64(mapEntrySize))
		}
	}
	if m.EngineId != 0 {
		n += 1 + sovFileCheckpoints(uint64(m.EngineId))
	}
	return n
}

func (m *ChunkCheckpointModel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovFileCheckpoints(uint64(l))
	}
	if m.Offset != 0 {
		n += 1 + sovFileCheckpoints(uint64(m.Offset))
	}
	l = len(m.Columns)
	if l > 0 {
		n += 1 + l + sovFileCheckpoints(uint64(l))
	}
	if m.ShouldIncludeRowId {
		n += 2
	}
	if m.EndOffset != 0 {
		n += 1 + sovFileCheckpoints(uint64(m.EndOffset))
	}
	if m.Pos != 0 {
		n += 1 + sovFileCheckpoints(uint64(m.Pos))
	}
	if m.PrevRowidMax != 0 {
		n += 1 + sovFileCheckpoints(uint64(m.PrevRowidMax))
	}
	if m.RowidMax != 0 {
		n += 1 + sovFileCheckpoints(uint64(m.RowidMax))
	}
	if m.KvcBytes != 0 {
		n += 1 + sovFileCheckpoints(uint64(m.KvcBytes))
	}
	if m.KvcKvs != 0 {
		n += 1 + sovFileCheckpoints(uint64(m.KvcKvs))
	}
	if m.KvcChecksum != 0 {
		n += 9
	}
	return n
}

func sovFileCheckpoints(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozFileCheckpoints(x uint64) (n int) {
	return sovFileCheckpoints(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CheckpointsModel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFileCheckpoints
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckpointsModel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckpointsModel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Checkpoints", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFileCheckpoints
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFileCheckpoints
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFileCheckpoints
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Checkpoints == nil {
				m.Checkpoints = make(map[string]*TableCheckpointModel)
			}
			var mapkey string
			var mapvalue *TableCheckpointModel
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFileCheckpoints
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFileCheckpoints
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthFileCheckpoints
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthFileCheckpoints
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFileCheckpoints
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthFileCheckpoints
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthFileCheckpoints
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &TableCheckpointModel{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipFileCheckpoints(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthFileCheckpoints
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Checkpoints[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFileCheckpoints(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFileCheckpoints
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFileCheckpoints
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TableCheckpointModel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFileCheckpoints
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TableCheckpointModel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TableCheckpointModel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFileCheckpoints
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFileCheckpoints
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthFileCheckpoints
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = append(m.Hash[:0], dAtA[iNdEx:postIndex]...)
			if m.Hash == nil {
				m.Hash = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFileCheckpoints
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllocBase", wireType)
			}
			m.AllocBase = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFileCheckpoints
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AllocBase |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFileCheckpoints
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.IndexEngineStatuses = append(m.IndexEngineStatuses, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFileCheckpoints
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthFileCheckpoints
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthFileCheckpoints
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.IndexEngineStatuses) == 0 {
					m.IndexEngineStatuses = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFileCheckpoints
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.IndexEngineStatuses = append(m.IndexEngineStatuses, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field IndexEngineStatuses", wireType)
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Engines", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFileCheckpoints
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFileCheckpoints
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFileCheckpoints
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Engines == nil {
				m.Engines = make(map[int32]*EngineCheckpointModel)
			}
			var mapkey int32
			var mapvalue *EngineCheckpointModel
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFileCheckpoints
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFileCheckpoints
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFileCheckpoints
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthFileCheckpoints
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthFileCheckpoints
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &EngineCheckpointModel{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipFileCheckpoints(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthFileCheckpoints
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Engines[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFileCheckpoints(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFileCheckpoints
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFileCheckpoints
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EngineCheckpointModel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFileCheckpoints
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EngineCheckpointModel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EngineCheckpointModel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFileCheckpoints
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chunks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFileCheckpoints
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFileCheckpoints
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFileCheckpoints
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Chunks == nil {
				m.Chunks = make(map[string]*ChunkCheckpointModel)
			}
			var mapkey string
			var mapvalue *ChunkCheckpointModel
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFileCheckpoints
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFileCheckpoints
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthFileCheckpoints
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthFileCheckpoints
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFileCheckpoints
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthFileCheckpoints
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthFileCheckpoints
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &ChunkCheckpointModel{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipFileCheckpoints(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthFileCheckpoints
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Chunks[mapkey] = mapvalue
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EngineId", wireType)
			}
			m.EngineId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFileCheckpoints
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EngineId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFileCheckpoints(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFileCheckpoints
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFileCheckpoints
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChunkCheckpointModel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFileCheckpoints
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChunkCheckpointModel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChunkCheckpointModel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFileCheckpoints
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFileCheckpoints
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFileCheckpoints
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFileCheckpoints
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Columns", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFileCheckpoints
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFileCheckpoints
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthFileCheckpoints
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Columns = append(m.Columns[:0], dAtA[iNdEx:postIndex]...)
			if m.Columns == nil {
				m.Columns = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShouldIncludeRowId", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFileCheckpoints
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ShouldIncludeRowId = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndOffset", wireType)
			}
			m.EndOffset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFileCheckpoints
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndOffset |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pos", wireType)
			}
			m.Pos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFileCheckpoints
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pos |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrevRowidMax", wireType)
			}
			m.PrevRowidMax = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFileCheckpoints
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PrevRowidMax |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RowidMax", wireType)
			}
			m.RowidMax = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFileCheckpoints
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RowidMax |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KvcBytes", wireType)
			}
			m.KvcBytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFileCheckpoints
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KvcBytes |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KvcKvs", wireType)
			}
			m.KvcKvs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFileCheckpoints
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KvcKvs |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field KvcChecksum", wireType)
			}
			m.KvcChecksum = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.KvcChecksum = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		default:
			iNdEx = preIndex
			skippy, err := skipFileCheckpoints(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFileCheckpoints
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFileCheckpoints
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFileCheckpoints(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFileCheckpoints
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFileCheckpoints
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFileCheckpoints
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthFileCheckpoints
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthFileCheckpoints
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowFileCheckpoints
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipFileCheckpoints(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthFileCheckpoints
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthFileCheckpoints = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFileCheckpoints   = fmt.Errorf("proto: integer overflow")
)
